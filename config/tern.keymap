/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Use Vallium layout but map it in the OS
#ifndef KEYMAP_DRAWER
#include "keys_vallium.h"
#endif

/* Key positions
    0  1  2  3         4  5  6  7
8  9  10 11 12        13 14 15 16 17
18 19 20 21              22 23 24 25
            26 27  28 29            */

#define KEYS_L 0 1 2 3 8 9 10 11 12 18 19 20 21
#define KEYS_R 4 5 6 7 13 14 15 16 17 22 23 24 25
#define KEYS_T 26 27 28 29

#define DEF_L 0
#define SYM_L 1
#define NAV_L 2
#define NUM_L 3
#define MED_L 4

// &lt { flavor = "tap-preferred"; };

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>; // the greater the value, the harder it will be to invoke the hold behavior
            require-prior-idle-ms = <190>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>; // the greater the value, the harder it will be to invoke the hold behavior
            require-prior-idle-ms = <190>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        cmma_slsh: comma_slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp FSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        dot_qmrk: dot_question_mark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };

    /* Key positions
       0  1  2  3         4  5  6  7
    8  9  10 11 12        13 14 15 16 17
    18 19 20 21              22 23 24 25
                26 27  28 29            */
    combos {
        compatible = "zmk,combos";
        v { key-positions = <20 21>; bindings = <&kp _V>; layers = <DEF_L>; timeout-ms = <200>; };
        q { key-positions = <1 2>;   bindings = <&kp _Q>; layers = <DEF_L>; timeout-ms = <75>; };
        z { key-positions = <19 20>; bindings = <&kp _Z>; layers = <DEF_L>; timeout-ms = <200>; };

        vlbkt { key-positions = <0 9>;  bindings = <&kp LBKT>; };
        vlpar { key-positions = <1 10>; bindings = <&kp LPAR>; };
        vlbrc { key-positions = <2 11>; bindings = <&kp LBRC>; };
        vrbrc { key-positions = <5 14>; bindings = <&kp RBRC>; };
        vrpar { key-positions = <6 15>; bindings = <&kp RPAR>; };
        vrbkt { key-positions = <7 16>; bindings = <&kp RBKT>; };

        cw  { key-positions = <18 25>; bindings = <&kp CAPSLOCK>; layers = <DEF_L>; timeout-ms = <100>; };

        esc { key-positions = <9 10 11>; bindings = <&kp ESC>; layers = <DEF_L>; };
        ret { key-positions = <14 15 16>; bindings = <&kp RET>; layers = <DEF_L>; };

        // slsh { key-positions = <23 24>; bindings = <&kp FSLH>; layers = <DEF_L>; };

        // lf_arr { key-positions = <5 6>;   bindings = <&lf_arr>; layers = <NUM_L>; };
        // ls_arr { key-positions = <6 7>;   bindings = <&ls_arr>; layers = <NUM_L>; };
        // rf_arr { key-positions = <14 15>; bindings = <&rf_arr>; layers = <NUM_L>; };
        // rs_arr { key-positions = <15 16>; bindings = <&rs_arr>; layers = <NUM_L>; };
        // expipe { key-positions = <19 20>; bindings = <&expipe>; layers = <NUM_L>; };
        // eextag { key-positions = <23 24>; bindings = <&eextag>; layers = <NUM_L>; };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM_L NAV_L>;
            then-layer = <NUM_L>;
        };
    };

    macros {
      ZMK_MACRO(rf_arr, bindings = <&kp EQUAL &kp GT>;)
      ZMK_MACRO(rs_arr, bindings = <&kp MINUS &kp GT>;)
      ZMK_MACRO(lf_arr, bindings = <&kp LT &kp EQUAL>;)
      ZMK_MACRO(ls_arr, bindings = <&kp LT &kp MINUS>;)
      ZMK_MACRO(expipe, bindings = <&kp PIPE &kp GT &kp SPACE>;)
      ZMK_MACRO(eextag, bindings = <&kp LT &kp PRCNT &kp EQUAL &kp SPACE &kp SPACE &kp PRCNT &kp GT &kp LEFT &kp LEFT &kp LEFT>;)
    };

    keymap {
        compatible = "zmk,keymap";

        /* Mostly Gallium-v2 but without B on pinky, from:
           https://www.reddit.com/r/KeyboardLayouts/comments/15zu2rn/sturdy_vs_nerps/jxjq139/ */

        default_layer {
            bindings = <
                              &kp _L       &kp _D        &kp _W          &kp _B        &kp _Y           &kp _F          &kp _O       &kp _U
                &hml LCTRL _N &hml LALT _R &hml LCMD _T  &hml LSHFT _S   &kp _G        &kp _K           &hml RSHFT _H   &hmr RCMD _E &hmr RALT _I &hmr RCTRL _A
                &kp _J        &kp _X       &kp _M        &kp _C                                         &kp _P          &cmma_slsh   &dot_qmrk    &kp SQT
                                                      &lt NAV_L SPACE &lt MED_L TAB    &sk LSHFT        &mo SYM_L
            >;
        };

        sym_layer {
            bindings = <
                           &kp HASH   &kp PRCNT   &kp AT          &kp PLUS      &kp TILDE       &trans         &kp STAR    &trans
                &kp _COLON &kp EXCL   &kp EQUAL   &kp UNDER       &kp PIPE      &kp BSLH        &kp RSHFT      &kp RCMD    &kp RALT   &kp RCTRL
                &kp AMPS   &kp CARET  &kp DLLR    &kp MINUS                                     &kp FSLH       &kp LT      &kp GT     &kp GRAVE
                                                  &trans          &trans        &trans          &trans
            >;
        };

        nav_layer {
            bindings = <
                            &trans      &kp _COLON   &trans          &trans       &trans           &trans         &trans   &trans
                &kp LCTRL   &kp LALT    &kp LCMD     &hml LSHFT TAB  &trans       &kp LEFT         &kp DOWN       &kp UP   &kp RIGHT  &kp BSPC
                &kp LG(_Z)  &kp LG(_X)  &kp LG(_C)   &kp LG(_V)                                    &trans         &trans   &trans     &kp FSLH
                                                     &trans          &trans       &trans           &trans
            >;
        };

        num_layer {
            bindings = <
                           &kp N7     &kp N8      &kp N9          &trans        &trans          &trans         &trans      &trans
                &kp _SEMI  &kp N4     &kp N5      &kp N6          &kp N0        &trans          &kp RSHFT      &kp RCMD    &kp RALT   &kp RCTRL
                &trans     &kp N1     &kp N2      &kp N3                                        &kp FSLH       &kp COMMA   &kp PERIOD &kp DQT 
                                                  &trans          &trans        &trans          &trans
            >;
        };

        med_layer {
            bindings = <
                          &bootloader &trans      &trans          &trans       &trans           &trans         &trans       &trans
                &kp LCTRL  &kp LALT   &kp LCMD    &kp LSHFT       &trans       &kp C_PREV       &kp C_VOL_DN   &kp C_VOL_UP &kp C_NEXT  &kp CAPSLOCK
                &trans     &trans     &trans      &trans                                        &trans         &trans       &trans      &trans
                                                  &trans          &trans       &trans           &kp C_PP
            >;
        };

    };
};
