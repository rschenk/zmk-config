/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>

// Use Vallium layout but map it in the OS
#ifndef KEYMAP_DRAWER
#include "keys_vallium.h"
#endif

/* Key positions
0  1  2  3  4         5  6  7  8  9
10 11 12 13 14        15 16 17 18 19
20 21 22 23 24        25 26 27 28 29
            30 31  32 33             */

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_T 30 31  32 33

#define DEF_L 0
#define HRM_L 1
#define SYM_L 2
#define NAV_L 3
#define NUM_L 4
#define SYS_L 5

#define NON_SYS_LAYERS DEF_L HRM_L SYM_L NAV_L NUM_L

// How long a key must be pressed to trigger Hold behavior
#define HRM_TERM 280
// If you press a tapped hold-tap again within quick-tap-ms milliseconds of the
// first press, it will always trigger the tap behavior
#define HRM_QUICK_TAP 175
// This effectively disables the hold-tap when typing quickly. As a rule of
// thumb, you want to set it to at least 10500/x where x is your (relaxed) WPM
#define HRM_IDLE (10500 / 50)
#define COMBO_IDLE HRM_IDLE

#define STICKY_KEY_TIMEOUT 1000

// Not-so-sticky key, see nk behavior def below
#define SK(KEY) &nk KEY KEY

&sk {  // sticky-key config
    release-after-ms = <STICKY_KEY_TIMEOUT>;
    quick-release;
};

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <HRM_TERM>;
            quick-tap-ms = <HRM_QUICK_TAP>;
            require-prior-idle-ms = <HRM_IDLE>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <HRM_TERM>;
            quick-tap-ms = <HRM_QUICK_TAP>;
            require-prior-idle-ms = <HRM_IDLE>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        cmma_slsh: comma_slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp FSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        dot_qmrk: dot_question_mark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        td_boot: double_tap_bootloader {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&none>, <&bootloader>;
        };

        swap: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
            // 0 is Q, 32 is shift
            ignored-key-positions = <0 32>;
        };
    };

    /* Key positions
    0  1  2  3  4         5  6  7  8  9
    10 11 12 13 14        15 16 17 18 19
    20 21 22 23 24        25 26 27 28 29
                30 31  32 33             */

    combos {
        compatible = "zmk,combos";

        vlbkt { key-positions = <1 11>; bindings = <&kp LBKT>; layers = <NON_SYS_LAYERS>; require-prior-idle-ms = <COMBO_IDLE>; };
        vlpar { key-positions = <2 12>; bindings = <&kp LPAR>; layers = <NON_SYS_LAYERS>; require-prior-idle-ms = <COMBO_IDLE>; };
        vlbrc { key-positions = <3 13>; bindings = <&kp LBRC>; layers = <NON_SYS_LAYERS>; require-prior-idle-ms = <COMBO_IDLE>; };
        vrbrc { key-positions = <6 16>; bindings = <&kp RBRC>; layers = <NON_SYS_LAYERS>; require-prior-idle-ms = <COMBO_IDLE>; };
        vrpar { key-positions = <7 17>; bindings = <&kp RPAR>; layers = <NON_SYS_LAYERS>; require-prior-idle-ms = <COMBO_IDLE>; };
        vrbkt { key-positions = <8 18>; bindings = <&kp RBKT>; layers = <NON_SYS_LAYERS>; require-prior-idle-ms = <COMBO_IDLE>; };

        cw  { key-positions = <20 29>; bindings = <&kp CAPSLOCK>; layers = <DEF_L>; timeout-ms = <100>; };

        esc { key-positions = <11 12 13>; bindings = <&kp ESC>; layers = <DEF_L HRM_L>; };
        ret { key-positions = <16 17 18>; bindings = <&kp RET>; layers = <DEF_L HRM_L>; };
        // tab { key-positions = <21 22 23>; bindings = <&kp TAB>; layers = <DEF_L HRM_L>; };
        // bsp { key-positions = <26 27 28>; bindings = <&kp BSPC>; layers = <DEF_L HRM_L>; };

        sall { key-positions = <21 22>; bindings = <&kp LG(_A)>; layers = <NAV_L>; };

        /* Activate system layer on inner thumb press */
        sys { key-positions = <31 32>; bindings = <&mo SYS_L>; require-prior-idle-ms = <COMBO_IDLE>; };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM_L NAV_L>;
            then-layer = <NUM_L>;
        };
    };

    macros {
      ZMK_MACRO(rf_arr, bindings = <&kp EQUAL &kp GT>;)
      ZMK_MACRO(rs_arr, bindings = <&kp MINUS &kp GT>;)
      ZMK_MACRO(lf_arr, bindings = <&kp LT &kp EQUAL>;)
      ZMK_MACRO(ls_arr, bindings = <&kp LT &kp MINUS>;)
      ZMK_MACRO(expipe, bindings = <&kp PIPE &kp GT &kp SPACE>;)
      ZMK_MACRO(eextag, bindings = <&kp LT &kp PRCNT &kp EQUAL &kp SPACE &kp SPACE &kp PRCNT &kp GT &kp LEFT &kp LEFT &kp LEFT>;)
    };

    keymap {
        compatible = "zmk,keymap";

        /* Mostly Gallium-v2 but without B on pinky, from:
           https://www.reddit.com/r/KeyboardLayouts/comments/15zu2rn/sturdy_vs_nerps/jxjq139/ */

        default_layer {
            bindings = <
                &kp _Q        &kp _L       &kp _D        &kp _W          &kp _B        &kp _Z           &kp _F          &kp _O       &kp _U       &kp SQT
                &kp _N        &kp _R       &kp _T        &kp _S          &kp _G        &kp _Y           &kp _H          &kp _E       &kp _I       &kp _A
                &kp _J        &kp _X       &kp _M        &kp _C          &kp _V        &kp _K           &kp _P          &cmma_slsh   &dot_qmrk    &kp FSLH
                                                         &mo NAV_L       &kp SPACE     &sk LSHFT        &mo SYM_L
            >;
        };

        /* The idea here is to activate this when using Illustrator/Photoshop */
        homerow_mods_layer {
            bindings = <
                &trans        &trans       &trans        &trans          &trans        &trans           &trans          &trans       &trans       &trans
                &hml LCTRL _N &hml LALT _R &hml LCMD _T  &hml LSHFT _S   &trans        &trans           &hmr RSHFT _H   &hmr RCMD _E &hmr RALT _I &hmr RCTRL _A
                &trans        &trans       &trans        &trans          &trans        &trans           &trans          &trans       &trans       &trans
                                                         &trans          &trans        &trans           &trans
            >;
        };

        sym_layer {
            bindings = <
                &trans     &kp HASH   &kp PRCNT   &kp AT          &kp PLUS      &kp TILDE       &trans         &kp STAR    &trans     &kp GRAVE
                &kp _COLON &kp EXCL   &kp EQUAL   &kp UNDER       &kp PIPE      &kp BSLH        &sk RSHFT      &sk RCMD    &sk RALT   &sk RCTRL
                &kp AMPS   &kp CARET  &kp DLLR    &kp MINUS       &trans        &trans          &kp FSLH       &kp LT      &kp GT     &trans
                                                  &trans          &trans        &trans          &trans
            >;
        };

        nav_layer {
            bindings = <
                &trans      &swap       &trans       &trans          &kp TAB         &trans   &trans         &trans      &trans     &trans
                &sk LCTRL   &sk LALT    &sk LCMD     &sk LSHFT       &kp BSPC        &kp LEFT &kp DOWN       &kp UP      &kp RIGHT  &none
                &kp LG(_Z)  &kp LG(_X)  &kp LG(_C)   &kp LG(_V)      &kp RET         &kp RET  &kp BSPC       &kp TAB     &trans     &trans
                                                     &trans          &trans          &trans   &trans
            >;
        };

        num_layer {
            bindings = <
                &trans     &kp N7     &kp N8      &kp N9          &trans        &trans          &trans         &trans      &trans     &kp DQT
                &kp _SEMI  &kp N1     &kp N2      &kp N3          &kp N0        &trans          &sk RSHFT      &sk RCMD    &sk RALT   &sk RCTRL
                &trans     &kp N4     &kp N5      &kp N6          &trans        &trans          &kp FSLH       &kp COMMA   &kp PERIOD &trans
                                                  &trans          &trans        &trans          &trans
            >;
        };

        system_layer {
            bindings = <
                &td_boot   &tog HRM_L &none    &none    &none    &rgb_ug RGB_TOG &none        &none        &none      &none
                &kp LCTRL  &kp LALT   &kp LCMD &kp LSHFT &none   &kp C_PREV      &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &none
                &bt BT_CLR &none      &none    &none    &none    &none           &kp C_PP     &none        &none      &none
                                               &trans   &trans    &trans          &trans
            >;
        };
    };
};
