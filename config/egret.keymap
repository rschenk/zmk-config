#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define NAV     1
#define MDA     2
#define NUM     3
#define SYM     4
#define FUN     5

/* Combo helper, to DRY up combo definitions
 * usage: COMBO(vol_up, &kp C_VOL_UP,  9 19) */
#define COMBO(name, keypress, keypos) \
    combo_##name {                    \
        layers = <0>;                 \
        timeout-ms = <25>;            \
        bindings = <keypress>;        \
        key-positions = <keypos>;     \
    };

/* Macro helper to DRY up simple keypress macros
 * usage: MACRO(dir_up, &kp DOT &kp DOT &kp FSLH) */
#define MACRO(name, keys)                  \
    name: name##_macro {                   \
        label = #name;                     \
        compatible = "zmk,behavior-macro"; \
        #binding-cells = <0>;              \
        wait-ms = <1>;                     \
        tap-ms = <1>;                      \
        bindings = <keys>;                 \
    };

/ {
      behaviors {
        /* Shift-key homerow mod is fundamentally different than the others
           because it's activated when typing at speed */
        hrs: home_row_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <70>; // the greater the value, the harder it will be to invoke the hold behavior
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        hrm: home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SLOW_HOME_ROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <140>; // the greater the value, the harder it will be to invoke the hold behavior
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        qlt: layer_tap_with_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_LAYER_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            bindings = <&mo>, <&kp>;
        };

    };

    /* Combo key positions
    0  1  2  3  4         5  6  7  8  9
    10 11 12 13 14        15 16 17 18 19
    20 21 22 23 24        25 26 27 28 29
             30 31 32  33 34 35         */
    combos {
        compatible = "zmk,combos";
        COMBO(rf_arr, &rf_arr, 6 7)
        COMBO(rs_arr, &rs_arr, 7 8)
        COMBO(lf_arr, &lf_arr, 2 3)
        COMBO(ls_arr, &ls_arr, 1 2)
        COMBO(ex_pipe, &ex_pipe, 22 23)
        COMBO(eex_tag, &eex_tag, 27 28)
    };

    macros {
        MACRO(rf_arr, &kp EQUAL &kp GT)
        MACRO(rs_arr, &kp MINUS &kp GT)
        MACRO(lf_arr, &kp LT &kp EQUAL)
        MACRO(ls_arr, &kp LT &kp MINUS)
        MACRO(ex_pipe, &kp PIPE &kp GT &kp SPACE)
        MACRO(eex_tag, &kp LT &kp PRCNT &kp EQUAL &kp SPACE &kp SPACE &kp PRCNT &kp GT &kp LEFT &kp LEFT &kp LEFT)
	};

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &kp Q           &kp W           &kp E           &kp R           &kp T       &kp Y           &kp U           &kp I           &kp O           &kp SQT
    &hrm LCTRL A    &hrm LALT S     &hrm LCMD D     &hrs LSHIFT F   &kp G       &kp H           &hrs RSHIFT J   &hrm RCMD K     &hrm RALT L     &hrm RCTRL SEMI
    &kp Z           &kp X           &kp C           &kp V           &kp B       &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH
                                    &qlt MDA ESC    &qlt NAV SPACE  &kp TAB     &qlt SYM RET    &qlt NUM BSPC   &qlt FUN DEL
            >;
        };

        nav_layer {
            bindings = <
    &trans    &trans    &trans    &trans      &trans   &trans   &trans    &trans  &trans    &trans
    &kp LCTRL &kp LALT  &kp LCMD  &kp LSHIFT  &trans   &kp LEFT &kp DOWN  &kp UP  &kp RIGHT &caps_word
    &trans    &trans    &trans    &trans      &trans   &trans   &trans    &trans  &trans    &trans
                        &trans    &trans      &trans   &kp RET  &kp BSPC  &kp DEL
            >;
        };

        media_layer {
            bindings = <
    &trans    &trans    &trans    &trans      &trans   &trans     &trans        &trans        &trans     &trans
    &kp LCTRL &kp LALT  &kp LCMD  &kp LSHIFT  &trans   &kp C_PREV &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT &trans
    &trans    &trans    &trans    &trans      &trans   &trans     &trans        &trans        &trans      &trans
                        &trans    &trans      &trans   &kp C_STOP &kp C_PP      &kp C_MUTE
            >;
        };

        num_layer {
            bindings = <
    &kp LBKT  &kp N7  &kp N8  &kp N9  &kp RBKT    &trans  &trans    &trans    &trans    &trans
    &kp P     &kp N4  &kp N5  &kp N6  &kp EQUAL   &trans  &kp RSHFT &kp RCMD  &kp RALT  &kp RCTRL
    &kp GRAVE &kp N1  &kp N2  &kp N3  &kp BSLH    &trans  &trans    &trans    &trans    &trans
                      &kp DOT &kp N0  &kp MINUS   &trans  &trans    &trans
            >;
        };

        sym_layer {
            bindings = <
    &kp LBRC  &kp AMPS  &kp STAR  &kp LPAR  &kp RBRC    &trans  &trans    &trans    &trans    &trans
    &kp LS(P) &kp DLLR  &kp PRCNT &kp CARET &kp PLUS    &trans  &kp RSHFT &kp RCMD  &kp RALT  &kp RCTRL
    &kp TILDE &kp EXCL  &kp AT    &kp HASH  &kp PIPE    &trans  &trans    &trans    &trans    &trans
                        &kp LPAR  &kp RPAR  &kp UNDER   &trans  &trans    &trans
            >;
        };

        fun_layer {
            bindings = <
    &kp F12   &kp F7    &kp F8    &kp F9    &kp PSCRN   &trans  &trans    &trans            &trans          &trans
    &kp F11   &kp F4    &kp F5    &kp F6    &kp SLCK    &trans  &kp RSHFT &kp RCMD          &kp RALT        &kp RCTRL
    &kp F10   &kp F1    &kp F2    &kp F3    &trans      &trans  &rgb_ug RGB_SPD    &rgb_ug RGB_EFF   &rgb_ug RGB_ON  &rgb_ug RGB_OFF
                        &kp K_APP &kp SPACE &kp TAB     &trans  &trans    &trans
            >;
        };
    };
};
